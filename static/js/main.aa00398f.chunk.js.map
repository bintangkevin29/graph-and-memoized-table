{"version":3,"sources":["components/section/section.component.tsx","components/section-header/section-header.component.tsx","redux/people/people.selector.ts","components/use-fetch/use-fetch.component.tsx","components/table-section/table-section.component.tsx","redux/people/people.action.ts","components/graph-section/graph-section.component.tsx","App.tsx","serviceWorker.ts","redux/people/people.reducer.ts","redux/root.reducer.ts","redux/store.ts","index.tsx"],"names":["Section","className","children","Container","SectionHeader","selectPeopleState","state","people","selectPeople","createSelector","data","selectPeoplePage","total","selectCurrentPeoplePage","currentPage","useFetch","url","options","useState","response","setResponse","undefined","error","setError","useEffect","axios","then","res","catch","err","message","TableSection","useSelector","totalPages","peoplePage","page","setPage","dispatch","useDispatch","isPageExist","find","p","shouldPageExist","memoizedPageValue","useMemo","type","payload","map","dt","appendPeople","results","filter","pages","i","push","Pagination","Item","key","onClick","Table","striped","bordered","hover","name","height","mass","hair_color","skin_color","GraphSection","chartData","d","Height","Number","replace","Weight","width","strokeDasharray","dataKey","fill","App","count","Boolean","window","location","hostname","match","INIT_STATE","peopleReducer","action","rootReducer","combineReducers","middleWares","logger","store","createStore","applyMiddleware","ReactDOM","render","basename","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"qVAkBeA,EARkB,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,UAAWC,EAAe,EAAfA,SAC7C,OACE,6BAASD,UAAS,kBAAaA,IAC7B,kBAACE,EAAA,EAAD,KAAYD,KCLHE,G,OAJiB,SAAC,GAAkB,IAAhBF,EAAe,EAAfA,SACjC,OAAO,0BAAMD,UAAU,iBAAiBC,K,kCCFpCG,EAAoB,SAACC,GAAD,OAAsBA,EAAMC,QAEzCC,EAAeC,YAAe,CAACJ,IAAoB,SAACK,GAAD,OAAUA,EAAKH,UAElEI,EAAmBF,YAAe,CAACJ,IAAoB,SAACK,GAAD,OAAUA,EAAKE,MAAQ,MAE9EC,EAA0BJ,YACrC,CAACJ,IACD,SAACK,GAAD,OAAUA,EAAKI,e,2BCUFC,EAlBE,SAACC,GAAmD,IAAtCC,EAAqC,uDAAP,GAAO,EAClCC,mBAAc,MADoB,mBAC3DC,EAD2D,KACjDC,EADiD,OAExCF,wBAA6BG,GAFW,mBAE3DC,EAF2D,KAEpDC,EAFoD,KAelE,OAXAC,qBAAU,WAENC,IAAMT,EAAKC,GACRS,MAAK,SAACC,GACLP,EAAYO,EAAIjB,SAEjBkB,OAAM,SAACC,GAAD,OAAqBN,EAASM,EAAIC,cAI5C,CAACd,IACG,CAAEG,WAAUG,U,QCwENS,EA1EgB,WAC7B,IAAMxB,EAASyB,YAAYxB,GACrByB,EAAaD,YAAYrB,GAEzBuB,EAAaF,YAAYnB,GAJI,EAKXK,mBAAS,GALE,mBAK5BiB,EAL4B,KAKtBC,EALsB,KAO7BC,EAAWC,cAEXC,EAAchC,EAAOiC,MAAK,SAACC,GAAD,OAAOA,EAAEN,OAASA,KAC5CO,OAAkCrB,IAAhBkB,EAElBI,EAAoBC,mBACxB,kBAAMT,IAEN,CAACO,IAGGf,EAAMZ,EAAS,sCAAD,OAAuC4B,IAE3DnB,qBAAU,WACJG,EAAIR,WAAaoB,GACnBF,EC/BsB,SAAC3B,EAAqByB,GAEhD,MAAO,CACLU,KAAM,gBACNC,QAHkBpC,EAAKqC,KAAI,SAACC,GAAD,sBAAcA,EAAd,CAAkBb,KAAMA,QD8BxCc,CAAatB,EAAIR,SAAS+B,QAASf,MAG7C,CAACR,EAAIR,WAERK,qBAAU,WACRa,EC7ByE,CAC3EQ,KAAM,0BACNC,QD2BgCvC,EAAO4C,QAAO,SAACV,GAAD,OAAOA,EAAEN,OAASA,SAE7D,CAACA,EAAM5B,IAIV,IAFA,IAAM6C,EAAQ,GAhCqB,WAkC1BC,GACPD,EAAME,KACJ,kBAACC,EAAA,EAAWC,KAAZ,CAAiBC,IAAKJ,EAAGK,QAAS,kBAAMtB,EAAQiB,KAC7CA,KAHEA,EAAI,EAAGA,GAAKpB,EAAYoB,IAAM,EAA9BA,GAQT,OACE,kBAAC,EAAD,CAASpD,UAAU,gBACjB,kBAAC,EAAD,cACA,kBAAC0D,EAAA,EAAD,CAAOC,SAAO,EAACC,UAAQ,EAACC,OAAK,GAC3B,+BACE,4BACE,oCACA,sCACA,oCACA,0CACA,4CAGJ,+BACG5B,EAAWa,KAAI,SAACN,EAAGY,GAAJ,OACd,wBAAII,IAAKJ,GACP,4BAAKZ,EAAEsB,MACP,4BAAKtB,EAAEuB,QACP,4BAAKvB,EAAEwB,MACP,4BAAKxB,EAAEyB,YACP,4BAAKzB,EAAE0B,kBAKf,yBAAKlE,UAAU,4BACb,kBAACsD,EAAA,EAAD,KAAaH,M,QEnDNgB,G,OAxBgB,WAC7B,IACMC,EADOrC,YAAYnB,GACFkC,KAAI,SAACuB,GAAD,MAAQ,CACjCP,KAAMO,EAAEP,KACRQ,OAAqB,YAAbD,EAAEN,OAAuB,UAAYQ,OAAOF,EAAEN,OAAOS,QAAQ,IAAK,KAC1EC,OAAmB,YAAXJ,EAAEL,KAAqB,UAAYO,OAAOF,EAAEL,KAAKQ,QAAQ,IAAK,SAGxE,OACE,kBAAC,EAAD,CAASxE,UAAU,gBACjB,kBAAC,EAAD,6BACA,kBAAC,IAAD,CAAU0E,MAAO,KAAMX,OAAQ,IAAKtD,KAAM2D,GACxC,kBAAC,IAAD,CAAeO,gBAAgB,UAC/B,kBAAC,IAAD,CAAOC,QAAQ,SACf,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,MACA,kBAAC,IAAD,CAAKA,QAAQ,SAASC,KAAK,YAC3B,kBAAC,IAAD,CAAKD,QAAQ,SAASC,KAAK,gBCKpBC,EAtBO,WACpB,IAAM7C,EAAaF,YAAYrB,GAEzB0B,EAAWC,cAEXX,EAAMZ,EAAS,iCASrB,OAPAS,qBAAU,WACW,IAAfU,GAAoBP,EAAIR,UAC1BkB,EFlBG,CACLQ,KAAM,aACNC,QEgBqBnB,EAAIR,SFhBX6D,UEmBb,CAACrD,IAGF,kBAAC,WAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,QCfcsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gDClBAC,EAA0B,CAC9B/E,OAAQ,GACRK,MAAO,EACPE,YAAa,IAgBAyE,EAbO,WAA6D,IAA5DjF,EAA2D,uDAAnDgF,EAAYE,EAAuC,uCAChF,OAAQA,EAAO3C,MACb,IAAK,aACH,OAAO,eAAKvC,EAAZ,CAAmBM,MAAO4E,EAAO1C,UACnC,IAAK,gBACH,OAAO,eAAKxC,EAAZ,CAAmBC,OAAO,GAAD,mBAAMiF,EAAO1C,SAAb,YAAyBxC,EAAMC,WAC1D,IAAK,0BACH,OAAO,eAAKD,EAAZ,CAAmBQ,YAAa0E,EAAO1C,UACzC,QACE,OAAOxC,ICNEmF,EANKC,YAAgB,CAClCnF,OAAQgF,ICAJI,EAAc,CAACC,KAINC,EAFDC,YAAYL,EAAaM,IAAe,WAAf,EAAmBJ,ICE1DK,IAASC,OACP,kBAAC,IAAD,CAAUJ,MAAOA,GACf,kBAAC,IAAD,CAAeK,SAAU,6BACvB,kBAAC,EAAD,QAGJC,SAASC,eAAe,SJ6HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB7E,MAAK,SAAA8E,GACJA,EAAaC,gBAEd7E,OAAM,SAAAN,GACLoF,QAAQpF,MAAMA,EAAMQ,c","file":"static/js/main.aa00398f.chunk.js","sourcesContent":["import React, { ReactNode } from \"react\";\n\nimport \"./section.style.scss\";\nimport { Container } from \"react-bootstrap\";\n\ninterface Props {\n  className?: string;\n  children: ReactNode;\n}\n\nconst Section: React.FC<Props> = ({ className, children }) => {\n  return (\n    <section className={`section ${className}`}>\n      <Container>{children}</Container>\n    </section>\n  );\n};\n\nexport default Section;\n","import React from \"react\";\n\nimport \"./section-header.style.scss\";\n\nconst SectionHeader: React.FC = ({ children }) => {\n  return <span className=\"sectionHeader\">{children}</span>;\n};\n\nexport default SectionHeader;\n","import { RootState } from \"../root.reducer\";\nimport { createSelector } from \"reselect\";\n\nconst selectPeopleState = (state: RootState) => state.people;\n\nexport const selectPeople = createSelector([selectPeopleState], (data) => data.people);\n\nexport const selectPeoplePage = createSelector([selectPeopleState], (data) => data.total / 10);\n\nexport const selectCurrentPeoplePage = createSelector(\n  [selectPeopleState],\n  (data) => data.currentPage\n);\n","import { useState, useEffect } from \"react\";\nimport axios, { AxiosRequestConfig, AxiosError } from \"axios\";\n\nconst useFetch = (url: string, options: AxiosRequestConfig = {}) => {\n  const [response, setResponse] = useState<any>(null);\n  const [error, setError] = useState<string | undefined>(undefined);\n\n  useEffect(() => {\n    const fetchData = () => {\n      axios(url, options)\n        .then((res) => {\n          setResponse(res.data);\n        })\n        .catch((err: AxiosError) => setError(err.message));\n    };\n    fetchData();\n    //eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [url]);\n  return { response, error };\n};\n\nexport default useFetch;\n","import React, { useState, useEffect, useMemo } from \"react\";\n\nimport Section from \"../section\";\nimport SectionHeader from \"../section-header\";\nimport { Table, Pagination } from \"react-bootstrap\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  selectPeople,\n  selectPeoplePage,\n  selectCurrentPeoplePage,\n} from \"../../redux/people/people.selector\";\n\nimport \"./table-section.style.scss\";\nimport useFetch from \"../use-fetch/use-fetch.component\";\nimport { appendPeople, setPeopleCurrentPage } from \"../../redux/people/people.action\";\n\nconst TableSection: React.FC = () => {\n  const people = useSelector(selectPeople);\n  const totalPages = useSelector(selectPeoplePage);\n\n  const peoplePage = useSelector(selectCurrentPeoplePage);\n  const [page, setPage] = useState(1);\n\n  const dispatch = useDispatch();\n\n  const isPageExist = people.find((p) => p.page === page);\n  const shouldPageExist = isPageExist === undefined;\n\n  const memoizedPageValue = useMemo(\n    () => page,\n    //eslint-disable-next-line react-hooks/exhaustive-deps\n    [shouldPageExist]\n  );\n\n  const res = useFetch(`https://swapi.dev/api/people/?page=${memoizedPageValue}`);\n\n  useEffect(() => {\n    if (res.response && !isPageExist) {\n      dispatch(appendPeople(res.response.results, page));\n    }\n    //eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [res.response]);\n\n  useEffect(() => {\n    dispatch(setPeopleCurrentPage(people.filter((p) => p.page === page)));\n    //eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [page, people]);\n\n  const pages = [];\n\n  for (let i = 1; i <= totalPages; i++) {\n    pages.push(\n      <Pagination.Item key={i} onClick={() => setPage(i)}>\n        {i}\n      </Pagination.Item>\n    );\n  }\n\n  return (\n    <Section className=\"tableSection\">\n      <SectionHeader>Table</SectionHeader>\n      <Table striped bordered hover>\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Height</th>\n            <th>Mass</th>\n            <th>Hair Color</th>\n            <th>Skin Color</th>\n          </tr>\n        </thead>\n        <tbody>\n          {peoplePage.map((p, i) => (\n            <tr key={i}>\n              <td>{p.name}</td>\n              <td>{p.height}</td>\n              <td>{p.mass}</td>\n              <td>{p.hair_color}</td>\n              <td>{p.skin_color}</td>\n            </tr>\n          ))}\n        </tbody>\n      </Table>\n      <div className=\"tableSection__pagination\">\n        <Pagination>{pages}</Pagination>\n      </div>\n    </Section>\n  );\n};\n\nexport default TableSection;\n","export const setPeople = (data: PeopleFetchResult): PeopleActions => {\n  return {\n    type: \"PEOPLE_SET\",\n    payload: data.count,\n  };\n};\n\nexport const appendPeople = (data: PeopleProps[], page: number): PeopleActions => {\n  const dataToState = data.map((dt) => ({ ...dt, page: page }));\n  return {\n    type: \"PEOPLE_APPEND\",\n    payload: dataToState,\n  };\n};\n\nexport const setPeopleCurrentPage = (data: PeopleProps[]): PeopleActions => ({\n  type: \"PEOPLE_SET_CURRENT_PAGE\",\n  payload: data,\n});\n","import React from \"react\";\nimport Section from \"../section\";\nimport SectionHeader from \"../section-header\";\nimport { BarChart, CartesianGrid, XAxis, YAxis, Tooltip, Legend, Bar } from \"recharts\";\nimport { useSelector } from \"react-redux\";\nimport { selectCurrentPeoplePage } from \"../../redux/people/people.selector\";\n\nimport \"./graph-section.style.scss\";\n\nconst GraphSection: React.FC = () => {\n  const data = useSelector(selectCurrentPeoplePage);\n  const chartData = data.map((d) => ({\n    name: d.name,\n    Height: d.height === \"unknown\" ? \"unknown\" : Number(d.height.replace(\",\", \"\")),\n    Weight: d.mass === \"unknown\" ? \"unknown\" : Number(d.mass.replace(\",\", \"\")),\n  }));\n\n  return (\n    <Section className=\"graphSection\">\n      <SectionHeader>Graph (Current Page)</SectionHeader>\n      <BarChart width={1080} height={250} data={chartData}>\n        <CartesianGrid strokeDasharray=\"10 10\" />\n        <XAxis dataKey=\"name\" />\n        <YAxis />\n        <Tooltip />\n        <Legend />\n        <Bar dataKey=\"Height\" fill=\"#8884d8\" />\n        <Bar dataKey=\"Weight\" fill=\"#82ca9d\" />\n      </BarChart>\n    </Section>\n  );\n};\n\nexport default GraphSection;\n","import React, { useEffect, Fragment } from \"react\";\n\nimport \"./style/main.scss\";\nimport TableSection from \"./components/table-section\";\nimport useFetch from \"./components/use-fetch/use-fetch.component\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectPeoplePage } from \"./redux/people/people.selector\";\nimport { setPeople } from \"./redux/people/people.action\";\nimport GraphSection from \"./components/graph-section\";\n\nconst App: React.FC = () => {\n  const peoplePage = useSelector(selectPeoplePage);\n\n  const dispatch = useDispatch();\n\n  const res = useFetch(\"https://swapi.dev/api/people/\");\n\n  useEffect(() => {\n    if (peoplePage === 0 && res.response) {\n      dispatch(setPeople(res.response));\n    }\n    //eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [res]);\n\n  return (\n    <Fragment>\n      <TableSection />\n      <GraphSection />\n    </Fragment>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const INIT_STATE: PeopleState = {\n  people: [],\n  total: 0,\n  currentPage: [],\n};\n\nconst peopleReducer = (state = INIT_STATE, action: PeopleActions): PeopleState => {\n  switch (action.type) {\n    case \"PEOPLE_SET\":\n      return { ...state, total: action.payload };\n    case \"PEOPLE_APPEND\":\n      return { ...state, people: [...action.payload, ...state.people] };\n    case \"PEOPLE_SET_CURRENT_PAGE\":\n      return { ...state, currentPage: action.payload };\n    default:\n      return state;\n  }\n};\n\nexport default peopleReducer;\n","import { combineReducers } from \"redux\";\nimport peopleReducer from \"./people/people.reducer\";\n\nconst rootReducer = combineReducers({\n  people: peopleReducer,\n});\n\nexport type RootState = ReturnType<typeof rootReducer>;\n\nexport default rootReducer;\n","import logger from \"redux-logger\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport rootReducer from \"./root.reducer\";\n\nconst middleWares = [logger];\n\nconst store = createStore(rootReducer, applyMiddleware(...middleWares));\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { Provider } from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <BrowserRouter basename={\"/graph-and-memoized-table\"}>\n      <App />\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}